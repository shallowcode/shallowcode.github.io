{"title":"搜索","uid":"3ae07ab74ec1bcb36882cc1ce0d929c6","slug":"搜索","date":"2022-05-12T00:57:55.000Z","updated":"2022-07-11T14:22:33.791Z","comments":true,"path":"api/articles/搜索.json","keywords":null,"cover":null,"content":"<h1 id=\"搜索剪枝\"><a href=\"#搜索剪枝\" class=\"headerlink\" title=\"搜索剪枝\"></a>搜索剪枝</h1><h3 id=\"小木棍\"><a href=\"#小木棍\" class=\"headerlink\" title=\"小木棍\"></a>小木棍</h3><p>有一些同样长的小木棍，将这些木棍随意切割，得到若干小木棍，已知这些小木棍的长度，求最小的初始木棍原长</p>\n<p>1.搜索</p>\n<p>根据一根木棍的拼接来确定搜索的参数，设立：</p>\n<ul>\n<li><p>还有多少木棍没有进行拼接</p>\n</li>\n<li><p>当前拼接的木棍还需要多少长度</p>\n</li>\n<li>目标木棍长度</li>\n<li>现在处理第几根木棍</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">vector&lt;int&gt; a(n + 1);\nvector&lt;bool&gt; vis(n + 1);&#x2F;&#x2F;利用vis数组来避免重复搜索\nbool dfs(int num, int rest, int len, int k)&#123;\n    if (num &#x3D;&#x3D; 0 &amp;&amp; rest &#x3D;&#x3D; 0)&#123;\n        return true;\n    &#125;\n    if (rest &#x3D;&#x3D; 0)&#123;\n        rest &#x3D; len;\n        k &#x3D; 1;\n    &#125;\n    for (int i &#x3D; k; i &lt;&#x3D; n; ++i)&#123;\n        if (!vis[i])&#123;\n            vis[i] &#x3D; 1;\n            if (dfs(num - 1, rest - a[i], len, i))&#123;\n                return true;\n            &#125;\n            vis[i] &#x3D; 0;\n        &#125;\n    &#125;\n    return false;\n&#125;</code></pre>\n<p>2.剪枝</p>\n<p>顾名思义，减去解答树的部分“枝条”，对于正在拼接的一根木棍而言，如果第一根小木棍就不能满足或者作为最后一根小木棍满足但是后续不满足，就不用考虑其他的小木棍了，且与其长度相同的小木棍也不用考虑了，由此，可以先预处理将所有小木棍由高到低排序，再进行下列操作</p>\n","text":"搜索剪枝小木棍有一些同样长的小木棍，将这些木棍随意切割，得到若干小木棍，已知这些小木棍的长度，求最小的初始木棍原长 1.搜索 根据一根木棍的拼接来确定搜索的参数，设立： 还有多少木棍没有进行拼接 当前拼接的木棍还需要多少长度 目标木棍长度 现在处理第几根木棍 vector&lt;...","link":"","photos":[],"count_time":{"symbolsCount":882,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%90%9C%E7%B4%A2%E5%89%AA%E6%9E%9D\"><span class=\"toc-text\">搜索剪枝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E6%9C%A8%E6%A3%8D\"><span class=\"toc-text\">小木棍</span></a></li></ol></li></ol></li></ol>","author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}},"mapped":true,"prev_post":{"title":"cf-792-div1+2","uid":"ec879031a4be3590103f0fd58b750e46","slug":"cf-792-div1-2","date":"2022-05-20T15:40:39.000Z","updated":"2022-05-24T12:42:29.107Z","comments":true,"path":"api/articles/cf-792-div1-2.json","keywords":null,"cover":null,"text":"C题意：给定一个矩阵，你可以将任意两列交换至多一次，问能否使矩阵每一行不下降 方法：读入矩阵，对每一行重新排序，若与原序列不同则加入有问题数组，数组长度大于2则不可能交换一次解决，否则将矩阵交换该两列，看是否满足答案 题意：给定一个2行n列的矩阵，可以任意交换两列，问能否使矩阵的...","link":"","photos":[],"count_time":{"symbolsCount":648,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},"next_post":{"title":"技巧","uid":"c415bd8a15236b765141e56b25f1f835","slug":"技巧","date":"2022-05-11T15:58:56.000Z","updated":"2022-06-26T16:48:54.706Z","comments":true,"path":"api/articles/技巧.json","keywords":null,"cover":null,"text":"$ 用逻辑尺来暴力枚举对于n个状态的取舍的2^n种情况 $ for (int i&#x3D;0;i&lt;(1&lt;&lt;n);++i)&#123; for (int j&#x3D;0;j&lt;n;++i)&#123; if(i&lt;&lt;j&amp;1)&#123; ...","link":"","photos":[],"count_time":{"symbolsCount":889,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}}}