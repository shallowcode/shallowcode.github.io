{"title":"cf-783-div2","uid":"fa4d4536e5d7115952b0289a4a257f8c","slug":"cf-783-div2","date":"2022-04-20T03:13:31.000Z","updated":"2022-04-20T06:57:51.333Z","comments":true,"path":"api/articles/cf-783-div2.json","keywords":null,"cover":[],"content":"<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h2><h4 id=\"题意：给出长度为的序列-长度为的序列中初始值全是-每次操作可以让加上或者减去-问最少操作多少次才能使变成一个严格单调递增的序列\"><a href=\"#题意：给出长度为的序列-长度为的序列中初始值全是-每次操作可以让加上或者减去-问最少操作多少次才能使变成一个严格单调递增的序列\" class=\"headerlink\" title=\"题意：给出长度为的序列,长度为的序列中初始值全是,每次操作可以让加上或者减去,问最少操作多少次才能使变成一个严格单调递增的序列.\"></a>题意：给出长度为<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"[公式]\">的序列<img src=\"https://www.zhihu.com/equation?tex=a\" alt=\"[公式]\">,长度为<img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"[公式]\">的序列<img src=\"https://www.zhihu.com/equation?tex=b\" alt=\"[公式]\">中初始值全是<img src=\"https://www.zhihu.com/equation?tex=0\" alt=\"[公式]\">,每次操作可以让<img src=\"https://www.zhihu.com/equation?tex=b_i\" alt=\"[公式]\">加上或者减去<img src=\"https://www.zhihu.com/equation?tex=a_i\" alt=\"[公式]\">,问最少操作多少次才能使<img src=\"https://www.zhihu.com/equation?tex=b_i\" alt=\"[公式]\">变成一个严格单调递增的序列.</h4><h4 id=\"方法：贪心的考虑，最终数组一定会有0存在，枚举0的位置，依次计算达到严格单调递增所需要移动的次数\"><a href=\"#方法：贪心的考虑，最终数组一定会有0存在，枚举0的位置，依次计算达到严格单调递增所需要移动的次数\" class=\"headerlink\" title=\"方法：贪心的考虑，最终数组一定会有0存在，枚举0的位置，依次计算达到严格单调递增所需要移动的次数\"></a>方法：贪心的考虑，最终数组一定会有0存在，枚举0的位置，依次计算达到严格单调递增所需要移动的次数</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">int main()&#123;\n    n&#x3D;read();\n    for (int i&#x3D;1;i&lt;&#x3D;n;++i)&#123;\n        a[i]&#x3D;read();\n    &#125;\n    for (int i&#x3D;1;i&lt;&#x3D;n;++i)&#123;\n        ll pre&#x3D;0,cnt&#x3D;0;\n        for (int j&#x3D;i+1;j&lt;&#x3D;n;++j)&#123;\n            pre+&#x3D;a[j]-pre%a[j];\n            cnt+&#x3D;pre&#x2F;a[j];\n        &#125;\n        pre&#x3D;0;\n        for (int j&#x3D;i-1;j&gt;&#x3D;1;--j)&#123;\n            pre+&#x3D;a[j]-pre%a[j];\n            cnt+&#x3D;pre&#x2F;a[j];\n        &#125;\n        cnt_min&#x3D;min(cnt_min,cnt);\n    &#125;\n    printf(&quot;%lld&quot;,cnt_min);\n&#125;</code></pre>\n<p><code>pre+=a[j]-pre%a[j]</code>满足大于pre且是a[j]的倍数的最小值</p>\n<h2 id=\"D\"><a href=\"#D\" class=\"headerlink\" title=\"D\"></a>D</h2><h4 id=\"题意：有一个长度为n的序列a，可以将其切割成连续的若干子列，每部分子列得分如下\"><a href=\"#题意：有一个长度为n的序列a，可以将其切割成连续的若干子列，每部分子列得分如下\" class=\"headerlink\" title=\"题意：有一个长度为n的序列a，可以将其切割成连续的若干子列，每部分子列得分如下\"></a>题意：有一个长度为n的序列a，可以将其切割成连续的若干子列，每部分子列得分如下</h4><ol>\n<li>如果子列和大于0，得分为子列的长度</li>\n<li>如果子列和等于0，得分为0</li>\n<li>如果子列和小于0，得分为子列的长度*-1</li>\n</ol>\n<h4 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4>","text":"C题意：给出长度为的序列,长度为的序列中初始值全是,每次操作可以让加上或者减去,问最少操作多少次才能使变成一个严格单调递增的序列.方法：贪心的考虑，最终数组一定会有0存在，枚举0的位置，依次计算达到严格单调递增所需要移动的次数int main()&#123; n&#x3D;rea...","link":"","photos":[],"count_time":{"symbolsCount":846,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C\"><span class=\"toc-text\">C</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A2%98%E6%84%8F%EF%BC%9A%E7%BB%99%E5%87%BA%E9%95%BF%E5%BA%A6%E4%B8%BA%E7%9A%84%E5%BA%8F%E5%88%97-%E9%95%BF%E5%BA%A6%E4%B8%BA%E7%9A%84%E5%BA%8F%E5%88%97%E4%B8%AD%E5%88%9D%E5%A7%8B%E5%80%BC%E5%85%A8%E6%98%AF-%E6%AF%8F%E6%AC%A1%E6%93%8D%E4%BD%9C%E5%8F%AF%E4%BB%A5%E8%AE%A9%E5%8A%A0%E4%B8%8A%E6%88%96%E8%80%85%E5%87%8F%E5%8E%BB-%E9%97%AE%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E5%A4%9A%E5%B0%91%E6%AC%A1%E6%89%8D%E8%83%BD%E4%BD%BF%E5%8F%98%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%A5%E6%A0%BC%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">题意：给出长度为的序列,长度为的序列中初始值全是,每次操作可以让加上或者减去,问最少操作多少次才能使变成一个严格单调递增的序列.</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%EF%BC%9A%E8%B4%AA%E5%BF%83%E7%9A%84%E8%80%83%E8%99%91%EF%BC%8C%E6%9C%80%E7%BB%88%E6%95%B0%E7%BB%84%E4%B8%80%E5%AE%9A%E4%BC%9A%E6%9C%890%E5%AD%98%E5%9C%A8%EF%BC%8C%E6%9E%9A%E4%B8%BE0%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E4%BE%9D%E6%AC%A1%E8%AE%A1%E7%AE%97%E8%BE%BE%E5%88%B0%E4%B8%A5%E6%A0%BC%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E6%89%80%E9%9C%80%E8%A6%81%E7%A7%BB%E5%8A%A8%E7%9A%84%E6%AC%A1%E6%95%B0\"><span class=\"toc-text\">方法：贪心的考虑，最终数组一定会有0存在，枚举0的位置，依次计算达到严格单调递增所需要移动的次数</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#D\"><span class=\"toc-text\">D</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A2%98%E6%84%8F%EF%BC%9A%E6%9C%89%E4%B8%80%E4%B8%AA%E9%95%BF%E5%BA%A6%E4%B8%BAn%E7%9A%84%E5%BA%8F%E5%88%97a%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%B0%86%E5%85%B6%E5%88%87%E5%89%B2%E6%88%90%E8%BF%9E%E7%BB%AD%E7%9A%84%E8%8B%A5%E5%B9%B2%E5%AD%90%E5%88%97%EF%BC%8C%E6%AF%8F%E9%83%A8%E5%88%86%E5%AD%90%E5%88%97%E5%BE%97%E5%88%86%E5%A6%82%E4%B8%8B\"><span class=\"toc-text\">题意：有一个长度为n的序列a，可以将其切割成连续的若干子列，每部分子列得分如下</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">分析：</span></a></li></ol></li></ol></li></ol>","author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}},"mapped":true,"prev_post":{"title":"二叉堆","uid":"1f95e29524cb1fc8f16f7dbdf365181a","slug":"二叉堆","date":"2022-04-27T06:23:23.000Z","updated":"2022-04-27T06:34:35.691Z","comments":true,"path":"api/articles/二叉堆.json","keywords":null,"cover":null,"text":"&#x2F;&#x2F;手动实现 void shift(int i)&#123; while(1)&#123; int l&#x3D;2*i; if(l&lt;&#x3D;len-1&amp;&amp;a[l]&gt;a[l+1])l++; if(l&gt;len||a[i]&l...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},"next_post":{"title":"树状数组2","uid":"75693a8c6f85806ac837bdc72f35a1c0","slug":"树状数组2","date":"2022-04-19T08:42:09.000Z","updated":"2022-04-19T08:42:23.468Z","comments":true,"path":"api/articles/树状数组2.json","keywords":null,"cover":null,"text":"#include&lt;bits&#x2F;stdc++.h&gt; #define ll long long #define MAX 500005 using namespace std; ll read()&#123; char c&#x3D;getchar();ll x&#...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}}}