{"title":"线段树1","uid":"da049d4802afb8f23eb9317447dbf0d1","slug":"线段树1","date":"2022-04-17T13:15:53.000Z","updated":"2022-04-17T13:16:55.632Z","comments":true,"path":"api/articles/线段树1.json","keywords":null,"cover":null,"content":"<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;bits&#x2F;stdc++.h&gt;\n#define MAXN 100001\n&#x2F;&#x2F;线段数模版\n&#x2F;&#x2F;查询：区间和\n&#x2F;&#x2F;更改：区间每个数加k\nusing namespace std;\nlong n,m;\nlong a[MAXN],ans[MAXN&lt;&lt;2],tag[MAXN&lt;&lt;2];&#x2F;&#x2F;原始数据，节点（区间）数据，标记（子节点服从父节点的标记）\ninline long read()&#123;\n    char c&#x3D;getchar();long x&#x3D;0,f&#x3D;1;\n    for (;!isdigit(c);c&#x3D;getchar())if(c&#x3D;&#x3D;&#39;-&#39;) f&#x3D;-1;\n    for (;isdigit(c);c&#x3D;getchar()) x&#x3D;x*10+c-48;\n    return x*f;\n&#125;&#x2F;&#x2F;快读\ninline long ls(long p) &#123;return p&lt;&lt;1;&#125;&#x2F;&#x2F;查询\ninline long rs(long p) &#123;return p&lt;&lt;1|1;&#125;\nvoid init()&#123;\n    for (int i&#x3D;1;i&lt;&#x3D;n;++i)&#123;\n        a[i]&#x3D;read();\n    &#125;\n&#125;&#x2F;&#x2F;初始化\ninline void pull_up(long p)&#123;\n    ans[p]&#x3D;ans[ls(p)]+ans[rs(p)];\n&#125;&#x2F;&#x2F;子节点与父节点建立逻辑\nvoid build(long p,long l,long r)&#123;\n    if(l&#x3D;&#x3D;r)&#123;\n        ans[p]&#x3D;a[l];\n        return ;\n    &#125;\n    long mid&#x3D;(l+r)&gt;&gt;1;\n    build(ls(p),l,mid);\n    build(rs(p),mid+1,r);\n    pull_up(p);&#x2F;&#x2F;向上传递\n&#125;\ninline void f(long p,long l,long r,long k)&#123;\n    ans[p]+&#x3D;k*(r-l+1);&#x2F;&#x2F;更新新区间的总和\n    tag[p]+&#x3D;k;&#x2F;&#x2F;更新新节点的区间加值\n&#125;&#x2F;&#x2F;子节点接受父节点的信息\ninline void push_down(long p,long l,long r)&#123;\n    long mid&#x3D;(l+r)&gt;&gt;1;\n    f(ls(p),l,mid,tag[p]);&#x2F;&#x2F;维护左节点\n    f(rs(p),mid+1,r,tag[p]);&#x2F;&#x2F;维护右节点\n    tag[p]&#x3D;0;\n&#125;\nvoid upgrade(long nl,long nr,long l,long r,long p,long k)&#123;\n    if(nl&lt;&#x3D;l&amp;&amp;nr&gt;&#x3D;r)&#123;\n        ans[p]+&#x3D;k*(r-l+1);\n        tag[p]+&#x3D;k;&#x2F;&#x2F;如果不往下更新了要留一个标记如果要查下面再更新\n        return;\n    &#125;\n    push_down(p,l,r);&#x2F;&#x2F;如果当前区间不被查询区间包含，直接向下传递\n    long mid&#x3D;(l+r)&gt;&gt;1;\n    if(nl&lt;&#x3D;mid) upgrade(nl,nr,l,mid,ls(p),k);\n    if(mid&lt;nr) upgrade(nl,nr,mid+1,r,rs(p),k);\n    pull_up(p);\n&#125;&#x2F;&#x2F;[nl,nr]为查询区间,l,r为当前p节点维护的区间,k为该区间每个值加多少\nlong index(long x,long y,long l,long r,long p)&#123;\n    if(x&lt;&#x3D;l&amp;&amp;r&lt;&#x3D;y) return ans[p];\n    long result&#x3D;0;\n    push_down(p,l,r);\n    long mid&#x3D;(l+r)&gt;&gt;1;\n    if(x&lt;&#x3D;mid) result+&#x3D;index(x,y,l,mid,ls(p));\n    if(mid&lt;y) result+&#x3D;index(x,y,mid+1,r,rs(p));\n    return result;\n&#125;\nint main()&#123;\n    n&#x3D;read();m&#x3D;read();\n    init();\n    build(1,1,n);\n    while(m--)&#123;\n        int ret&#x3D;read();\n        long x,y;\n        if(ret&#x3D;&#x3D;1)&#123;\n            x&#x3D;read();y&#x3D;read();ret&#x3D;read();\n            upgrade(x,y,1,n,1,ret);\n        &#125;\n        else&#123;\n            x&#x3D;read();y&#x3D;read();\n            printf(&quot;%ld\\n&quot;,index(x,y,1,n,1));\n        &#125;\n    &#125;\n&#125;</code></pre>\n","text":"#include&lt;bits&#x2F;stdc++.h&gt; #define MAXN 100001 &#x2F;&#x2F;线段数模版 &#x2F;&#x2F;查询：区间和 &#x2F;&#x2F;更改：区间每个数加k using namespace std; long...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}},"mapped":true,"prev_post":{"title":"线段树2","uid":"001dbd05b69938b44aa0e24828eb90f6","slug":"线段树2","date":"2022-04-18T15:16:53.000Z","updated":"2022-04-18T15:17:17.692Z","comments":true,"path":"api/articles/线段树2.json","keywords":null,"cover":null,"text":"void init()&#123; for (int i&#x3D;1;i&lt;&#x3D;n;++i)&#123; a[i]&#x3D;read(); &#125; &#125;&#x2F;&#x2F;初始化 inline ll ls(long p) &#123;return...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},"next_post":{"title":"st表","uid":"f6c19d68f103e4d846ec55d23a2ae394","slug":"st表","date":"2022-04-16T15:49:50.000Z","updated":"2022-04-17T13:16:19.072Z","comments":true,"path":"api/articles/st表.json","keywords":null,"cover":null,"text":"#include&lt;bits&#x2F;stdc++.h&gt; using namespace std; int n,m,l,r; int a[max_n][max_n的2进制最高位]; inline int read()&#123; char c&#x3D;getchar...","link":"","photos":[],"count_time":{"symbolsCount":884,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}}}