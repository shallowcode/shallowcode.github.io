{"title":"二分","uid":"8038215b5c2b5aa82664c7d7c50d2cdc","slug":"二分","date":"2022-09-28T02:43:27.000Z","updated":"2022-09-28T08:02:23.629Z","comments":true,"path":"api/articles/二分.json","keywords":null,"cover":null,"content":"<h3 id=\"二分答案\"><a class=\"markdownIt-Anchor\" href=\"#二分答案\"></a> 二分答案</h3>\n<p>前提：满足答案单调性，当求解一个问题过程需要考虑的因素比较复杂，很难通过已知要素直接推断出结果，而且因素之间互相影响， 则考虑二分答案，或者更明显的求最小值的最大值，最大值的最小值</p>\n<h3 id=\"格式\"><a class=\"markdownIt-Anchor\" href=\"#格式\"></a> 格式</h3>\n<p>不断缩减解空间的大小，整数缩减到1，浮点数缩减到精度eps</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">int l, r;\nwhile (r - l &gt; 1)&#123;\n    int mid &#x3D; (l + r) &gt;&gt; 1;\n    if (check(mid)) l &#x3D; mid;\n    else r &#x3D; mid;\n&#125;\ncout &lt;&lt; l &lt;&lt; &#39;\\n&#39;;\n&#x2F;&#x2F;显然此处的解空间是[l, r)\n\ndouble l, r;\nwhile (r - l &gt; eps)&#123;\n    double mid &#x3D; (l + r) &#x2F; 2;\n    if (check(mid)) l &#x3D; mid;\n    else r &#x3D; mid;\n&#125;\ncout &lt;&lt; fixed &lt;&lt; setprecision(6) &lt;&lt; l &lt;&lt; &#39;\\n&#39;;\n&#x2F;&#x2F;显然此处eps精度为1e-6</code></pre>\n<p>ps:需要注意的点是，尽量把端点确定的精准一点有些题卡的比较死</p>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\"></a> 函数</h3>\n<p>lower_bound() 与 upper_bound()，对于一个区间的两个端点，如果想在一个有序序列中划出，左端点采用大于等于，右端点采用大于，这样得出的答案一定是<code>[l, r)</code></p>\n<h3 id=\"二分贪心前缀和\"><a class=\"markdownIt-Anchor\" href=\"#二分贪心前缀和\"></a> 二分+贪心+前缀和</h3>\n<h5 id=\"跳石头一条河一些石头现在希望去掉一些石头使得跳跃最小距离最大首先跳跃的最小的距离必须大于等于河的长度其次对于check函数累计自身还没跳的距离一旦大于设定的最短距离就跳累计的距离清空否则就把石头拿掉继续累积没跳的距离\"><a class=\"markdownIt-Anchor\" href=\"#跳石头一条河一些石头现在希望去掉一些石头使得跳跃最小距离最大首先跳跃的最小的距离必须大于等于河的长度其次对于check函数累计自身还没跳的距离一旦大于设定的最短距离就跳累计的距离清空否则就把石头拿掉继续累积没跳的距离\"></a> 跳石头：一条河，一些石头，现在希望去掉一些石头使得跳跃最小距离最大，首先跳跃的最小的距离必须大于等于河的长度，其次对于check函数，累计自身还没跳的距离，一旦大于设定的最短距离就跳，累计的距离清空，否则就把石头拿掉继续累积没跳的距离</h5>\n<h5 id=\"牛子排队一群牛牛站成一排每个牛牛在达到第一名之后插到队尾固定的位置如果排队次数不限问有多少个牛牛不能排到第一位首先分析如果一个牛牛不能排到第一位则他之后的牛牛都不能排到第一则答案满足单调性接着考虑某个牛牛如果能到达第一位的充要条件是他前面的所有牛牛都能到他后面由于在第一只牛牛到达他后面之前他后面牛牛的数量是一定的而且一次最多增加一只牛牛将他前面的牛牛排序最容易查到他后面的牛牛先插插完空间加1如果这样都不能插那肯定不行因为比你大的更插不进去\"><a class=\"markdownIt-Anchor\" href=\"#牛子排队一群牛牛站成一排每个牛牛在达到第一名之后插到队尾固定的位置如果排队次数不限问有多少个牛牛不能排到第一位首先分析如果一个牛牛不能排到第一位则他之后的牛牛都不能排到第一则答案满足单调性接着考虑某个牛牛如果能到达第一位的充要条件是他前面的所有牛牛都能到他后面由于在第一只牛牛到达他后面之前他后面牛牛的数量是一定的而且一次最多增加一只牛牛将他前面的牛牛排序最容易查到他后面的牛牛先插插完空间加1如果这样都不能插那肯定不行因为比你大的更插不进去\"></a> 牛子排队：一群牛牛站成一排，每个牛牛在达到第一名之后插到队尾固定的位置，如果排队次数不限，问有多少个牛牛不能排到第一位，首先分析如果一个牛牛不能排到第一位则他之后的牛牛都不能排到第一，则答案满足单调性，接着考虑某个牛牛如果能到达第一位的充要条件是他前面的所有牛牛都能到他后面，由于在第一只牛牛到达他后面之前，他后面牛牛的数量是一定的，而且一次最多增加一只牛牛，将他前面的牛牛排序，最容易查到他后面的牛牛先插，插完空间加1，如果这样都不能插那肯定不行，因为比你大的更插不进去</h5>\n<h5 id=\"扑克牌有若干种普通扑克牌各若干张赖子牌若干张已知赖子牌可以替换任意普通牌-所有扑克牌各一张可以组成一套牌一套牌中最多只能有一张赖子牌首先先确定check函数能否凑成x套牌可以转化为需要多少赖子牌才可以组成x套牌最后赖子牌的数量应该小于等于minx-mm是赖子牌原有的数量对于每一种牌如果数量不够x张就用赖子牌补齐这里要注意的是不需要你确定具体牌是怎么分配的你只需要知道只要赖子牌总数不超过x张每种牌都有x张算上赖子牌就一定可以完成目标\"><a class=\"markdownIt-Anchor\" href=\"#扑克牌有若干种普通扑克牌各若干张赖子牌若干张已知赖子牌可以替换任意普通牌-所有扑克牌各一张可以组成一套牌一套牌中最多只能有一张赖子牌首先先确定check函数能否凑成x套牌可以转化为需要多少赖子牌才可以组成x套牌最后赖子牌的数量应该小于等于minx-mm是赖子牌原有的数量对于每一种牌如果数量不够x张就用赖子牌补齐这里要注意的是不需要你确定具体牌是怎么分配的你只需要知道只要赖子牌总数不超过x张每种牌都有x张算上赖子牌就一定可以完成目标\"></a> 扑克牌：有若干种普通扑克牌各若干张，赖子牌若干张，已知赖子牌可以替换任意普通牌， 所有扑克牌各一张可以组成一套牌，一套牌中最多只能有一张赖子牌：首先先确定check函数，能否凑成x套牌？可以转化为需要多少赖子牌才可以组成x套牌，最后赖子牌的数量应该小于等于min(x, m)(m是赖子牌原有的数量)对于每一种牌，如果数量不够x张就用赖子牌补齐，这里要注意的是，不需要你确定具体牌是怎么分配的，你只需要知道只要赖子牌总数不超过x张，每种牌都有x张（算上赖子牌）就一定可以完成目标</h5>\n<h5 id=\"第k大的数给定一个序列a对于其所有长度大于k的子区间把其中的第k大的数加入一个空序列求这空序列第m大的数枚举这个数通过双指针寻找包含至少k个大于等于二分值的区间数量判断是否大于等于m个即可\"><a class=\"markdownIt-Anchor\" href=\"#第k大的数给定一个序列a对于其所有长度大于k的子区间把其中的第k大的数加入一个空序列求这空序列第m大的数枚举这个数通过双指针寻找包含至少k个大于等于二分值的区间数量判断是否大于等于m个即可\"></a> 第k大的数：给定一个序列A，对于其所有长度大于k的子区间，把其中的第k大的数加入一个空序列，求这空序列第m大的数：枚举这个数，通过双指针寻找包含至少k个大于等于二分值的区间数量，判断是否大于等于m个即可</h5>\n<h5 id=\"分蛋糕一个蛋糕要切成ab份必须横向a-1刀纵向b-1行-求一种切法使得最小的蛋糕最大两个坐标确定一个矩形所以优先设定左上角的值右下角的值直到切出来的值大于二分值再切而且如果发现纵向不够b个则放弃本次切否则更改左上角的坐标位置\"><a class=\"markdownIt-Anchor\" href=\"#分蛋糕一个蛋糕要切成ab份必须横向a-1刀纵向b-1行-求一种切法使得最小的蛋糕最大两个坐标确定一个矩形所以优先设定左上角的值右下角的值直到切出来的值大于二分值再切而且如果发现纵向不够b个则放弃本次切否则更改左上角的坐标位置\"></a> 分蛋糕：一个蛋糕要切成A*B份，必须横向A-1刀，纵向B-1行， 求一种切法使得最小的蛋糕最大，两个坐标确定一个矩形，所以优先设定左上角的值，右下角的值直到切出来的值大于二分值再切，而且如果发现纵向不够B个则放弃本次切，否则更改左上角的坐标位置</h5>\n<h3 id=\"二分递归解决问题\"><a class=\"markdownIt-Anchor\" href=\"#二分递归解决问题\"></a> 二分递归解决问题</h3>\n<h5 id=\"位数差给定一个数组对于任意两个数字其位数差定义为右边的数字加上左边的数字得到的数字位数比左面的数字大几位求这个数组位数差之和一个数组的位数差之和等于左区间的答案加上右区间的答案外加左区间的每个数对于右区间每个数所产生的位数差的贡献事先设定一个数组存有10的幂级在递归时将右区间排序对于10的每个幂级在右区间直接二分查找而由于单次产生的差值恰好与两个数之间包含了几个10的幂级相同所以结果不会出错\"><a class=\"markdownIt-Anchor\" href=\"#位数差给定一个数组对于任意两个数字其位数差定义为右边的数字加上左边的数字得到的数字位数比左面的数字大几位求这个数组位数差之和一个数组的位数差之和等于左区间的答案加上右区间的答案外加左区间的每个数对于右区间每个数所产生的位数差的贡献事先设定一个数组存有10的幂级在递归时将右区间排序对于10的每个幂级在右区间直接二分查找而由于单次产生的差值恰好与两个数之间包含了几个10的幂级相同所以结果不会出错\"></a> 位数差：给定一个数组，对于任意两个数字，其位数差定义为右边的数字加上左边的数字得到的数字位数比左面的数字大几位，求这个数组位数差之和：一个数组的位数差之和等于左区间的答案加上右区间的答案外加左区间的每个数对于右区间每个数所产生的位数差的贡献，事先设定一个数组存有10的幂级，在递归时，将右区间排序，对于10的每个幂级，在右区间直接二分查找，而由于单次产生的差值恰好与两个数之间包含了几个10的幂级相同，所以结果不会出错</h5>\n<h3 id=\"三分答案\"><a class=\"markdownIt-Anchor\" href=\"#三分答案\"></a> 三分答案</h3>\n<p>对于一个单峰函数而言，三分答案可以不断逼近最终的值，而往往三分的题可以在考虑时间复杂度的情况下直接暴力细分区间来做</p>\n<h5 id=\"传送带有两条线段以及一个平面有一个物块想从其中一条线段的端点移动到另一条线段的端点其中三条线段的移动速度各不相同求所花时间的最小值如果固定第一条线段的值发现对于另一条线段上的点是一个单峰函数可以用三分解决同时固定第一条线段值这个过程也是一个三分的过程所以是三分套三分另外还有一种解法即细分两条线段区间依次枚举求最小值即可具体细分程度要考虑浮点数精度和时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#传送带有两条线段以及一个平面有一个物块想从其中一条线段的端点移动到另一条线段的端点其中三条线段的移动速度各不相同求所花时间的最小值如果固定第一条线段的值发现对于另一条线段上的点是一个单峰函数可以用三分解决同时固定第一条线段值这个过程也是一个三分的过程所以是三分套三分另外还有一种解法即细分两条线段区间依次枚举求最小值即可具体细分程度要考虑浮点数精度和时间复杂度\"></a> 传送带：有两条线段以及一个平面，有一个物块想从其中一条线段的端点移动到另一条线段的端点，其中三条线段的移动速度各不相同，求所花时间的最小值，如果固定第一条线段的值，发现对于另一条线段上的点是一个单峰函数，可以用三分解决，同时固定第一条线段值这个过程也是一个三分的过程，所以是三分套三分，另外还有一种解法，即细分两条线段区间，依次枚举，求最小值即可，具体细分程度要考虑浮点数精度和时间复杂度</h5>\n<h5 id=\"期末考试有若干门课程发布时间有若干同学每个人都有期望的所有课程发布的时间该时间晚一天就会产生一定的不愉快度同时还有两种调整课程发布时间的方法一种是直接提前某门课的时间b另一种是延后某一门而提前另一门a这两种方法各自拥有不同的愉快度求总体产生的最小愉快度方法是暴力强行通过枚举的方式来使某一种参数确定下来而分析另外的因素所以直接枚举课程发布的最晚时间总不愉快度由两部分确定一种是学生的不愉快度另一种如果b小于等于a的话肯定全用b-否则优先用a-但是要考虑a最多能用多少\"><a class=\"markdownIt-Anchor\" href=\"#期末考试有若干门课程发布时间有若干同学每个人都有期望的所有课程发布的时间该时间晚一天就会产生一定的不愉快度同时还有两种调整课程发布时间的方法一种是直接提前某门课的时间b另一种是延后某一门而提前另一门a这两种方法各自拥有不同的愉快度求总体产生的最小愉快度方法是暴力强行通过枚举的方式来使某一种参数确定下来而分析另外的因素所以直接枚举课程发布的最晚时间总不愉快度由两部分确定一种是学生的不愉快度另一种如果b小于等于a的话肯定全用b-否则优先用a-但是要考虑a最多能用多少\"></a> 期末考试：有若干门课程发布时间，有若干同学，每个人都有期望的所有课程发布的时间，该时间晚一天就会产生一定的不愉快度，同时还有两种调整课程发布时间的方法，一种是直接提前某门课的时间B，另一种是延后某一门而提前另一门A，这两种方法各自拥有不同的愉快度，求总体产生的最小愉快度：方法是暴力：强行通过枚举的方式来使某一种参数确定下来而分析另外的因素，所以直接枚举课程发布的最晚时间，总不愉快度由两部分确定，一种是学生的不愉快度，另一种如果B小于等于A的话肯定全用B， 否则优先用A， 但是要考虑A最多能用多少</h5>\n","text":" 二分答案 前提：满足答案单调性，当求解一个问题过程需要考虑的因素比较复杂，很难通过已知要素直接推断出结果，而且因素之间互相影响， 则考虑二分答案，或者更明显的求最小值的最大值，最大值的最小值 格式 不断缩减解空间的大小，整数缩减到1，浮点数缩减到精度eps int l, r; ...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88\"><span class=\"toc-text\"> 二分答案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\"> 格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> 函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E8%B4%AA%E5%BF%83%E5%89%8D%E7%BC%80%E5%92%8C\"><span class=\"toc-text\"> 二分+贪心+前缀和</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%B7%B3%E7%9F%B3%E5%A4%B4%E4%B8%80%E6%9D%A1%E6%B2%B3%E4%B8%80%E4%BA%9B%E7%9F%B3%E5%A4%B4%E7%8E%B0%E5%9C%A8%E5%B8%8C%E6%9C%9B%E5%8E%BB%E6%8E%89%E4%B8%80%E4%BA%9B%E7%9F%B3%E5%A4%B4%E4%BD%BF%E5%BE%97%E8%B7%B3%E8%B7%83%E6%9C%80%E5%B0%8F%E8%B7%9D%E7%A6%BB%E6%9C%80%E5%A4%A7%E9%A6%96%E5%85%88%E8%B7%B3%E8%B7%83%E7%9A%84%E6%9C%80%E5%B0%8F%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%BF%85%E9%A1%BB%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E6%B2%B3%E7%9A%84%E9%95%BF%E5%BA%A6%E5%85%B6%E6%AC%A1%E5%AF%B9%E4%BA%8Echeck%E5%87%BD%E6%95%B0%E7%B4%AF%E8%AE%A1%E8%87%AA%E8%BA%AB%E8%BF%98%E6%B2%A1%E8%B7%B3%E7%9A%84%E8%B7%9D%E7%A6%BB%E4%B8%80%E6%97%A6%E5%A4%A7%E4%BA%8E%E8%AE%BE%E5%AE%9A%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB%E5%B0%B1%E8%B7%B3%E7%B4%AF%E8%AE%A1%E7%9A%84%E8%B7%9D%E7%A6%BB%E6%B8%85%E7%A9%BA%E5%90%A6%E5%88%99%E5%B0%B1%E6%8A%8A%E7%9F%B3%E5%A4%B4%E6%8B%BF%E6%8E%89%E7%BB%A7%E7%BB%AD%E7%B4%AF%E7%A7%AF%E6%B2%A1%E8%B7%B3%E7%9A%84%E8%B7%9D%E7%A6%BB\"><span class=\"toc-text\"> 跳石头：一条河，一些石头，现在希望去掉一些石头使得跳跃最小距离最大，首先跳跃的最小的距离必须大于等于河的长度，其次对于check函数，累计自身还没跳的距离，一旦大于设定的最短距离就跳，累计的距离清空，否则就把石头拿掉继续累积没跳的距离</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%89%9B%E5%AD%90%E6%8E%92%E9%98%9F%E4%B8%80%E7%BE%A4%E7%89%9B%E7%89%9B%E7%AB%99%E6%88%90%E4%B8%80%E6%8E%92%E6%AF%8F%E4%B8%AA%E7%89%9B%E7%89%9B%E5%9C%A8%E8%BE%BE%E5%88%B0%E7%AC%AC%E4%B8%80%E5%90%8D%E4%B9%8B%E5%90%8E%E6%8F%92%E5%88%B0%E9%98%9F%E5%B0%BE%E5%9B%BA%E5%AE%9A%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%A6%82%E6%9E%9C%E6%8E%92%E9%98%9F%E6%AC%A1%E6%95%B0%E4%B8%8D%E9%99%90%E9%97%AE%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%AA%E7%89%9B%E7%89%9B%E4%B8%8D%E8%83%BD%E6%8E%92%E5%88%B0%E7%AC%AC%E4%B8%80%E4%BD%8D%E9%A6%96%E5%85%88%E5%88%86%E6%9E%90%E5%A6%82%E6%9E%9C%E4%B8%80%E4%B8%AA%E7%89%9B%E7%89%9B%E4%B8%8D%E8%83%BD%E6%8E%92%E5%88%B0%E7%AC%AC%E4%B8%80%E4%BD%8D%E5%88%99%E4%BB%96%E4%B9%8B%E5%90%8E%E7%9A%84%E7%89%9B%E7%89%9B%E9%83%BD%E4%B8%8D%E8%83%BD%E6%8E%92%E5%88%B0%E7%AC%AC%E4%B8%80%E5%88%99%E7%AD%94%E6%A1%88%E6%BB%A1%E8%B6%B3%E5%8D%95%E8%B0%83%E6%80%A7%E6%8E%A5%E7%9D%80%E8%80%83%E8%99%91%E6%9F%90%E4%B8%AA%E7%89%9B%E7%89%9B%E5%A6%82%E6%9E%9C%E8%83%BD%E5%88%B0%E8%BE%BE%E7%AC%AC%E4%B8%80%E4%BD%8D%E7%9A%84%E5%85%85%E8%A6%81%E6%9D%A1%E4%BB%B6%E6%98%AF%E4%BB%96%E5%89%8D%E9%9D%A2%E7%9A%84%E6%89%80%E6%9C%89%E7%89%9B%E7%89%9B%E9%83%BD%E8%83%BD%E5%88%B0%E4%BB%96%E5%90%8E%E9%9D%A2%E7%94%B1%E4%BA%8E%E5%9C%A8%E7%AC%AC%E4%B8%80%E5%8F%AA%E7%89%9B%E7%89%9B%E5%88%B0%E8%BE%BE%E4%BB%96%E5%90%8E%E9%9D%A2%E4%B9%8B%E5%89%8D%E4%BB%96%E5%90%8E%E9%9D%A2%E7%89%9B%E7%89%9B%E7%9A%84%E6%95%B0%E9%87%8F%E6%98%AF%E4%B8%80%E5%AE%9A%E7%9A%84%E8%80%8C%E4%B8%94%E4%B8%80%E6%AC%A1%E6%9C%80%E5%A4%9A%E5%A2%9E%E5%8A%A0%E4%B8%80%E5%8F%AA%E7%89%9B%E7%89%9B%E5%B0%86%E4%BB%96%E5%89%8D%E9%9D%A2%E7%9A%84%E7%89%9B%E7%89%9B%E6%8E%92%E5%BA%8F%E6%9C%80%E5%AE%B9%E6%98%93%E6%9F%A5%E5%88%B0%E4%BB%96%E5%90%8E%E9%9D%A2%E7%9A%84%E7%89%9B%E7%89%9B%E5%85%88%E6%8F%92%E6%8F%92%E5%AE%8C%E7%A9%BA%E9%97%B4%E5%8A%A01%E5%A6%82%E6%9E%9C%E8%BF%99%E6%A0%B7%E9%83%BD%E4%B8%8D%E8%83%BD%E6%8F%92%E9%82%A3%E8%82%AF%E5%AE%9A%E4%B8%8D%E8%A1%8C%E5%9B%A0%E4%B8%BA%E6%AF%94%E4%BD%A0%E5%A4%A7%E7%9A%84%E6%9B%B4%E6%8F%92%E4%B8%8D%E8%BF%9B%E5%8E%BB\"><span class=\"toc-text\"> 牛子排队：一群牛牛站成一排，每个牛牛在达到第一名之后插到队尾固定的位置，如果排队次数不限，问有多少个牛牛不能排到第一位，首先分析如果一个牛牛不能排到第一位则他之后的牛牛都不能排到第一，则答案满足单调性，接着考虑某个牛牛如果能到达第一位的充要条件是他前面的所有牛牛都能到他后面，由于在第一只牛牛到达他后面之前，他后面牛牛的数量是一定的，而且一次最多增加一只牛牛，将他前面的牛牛排序，最容易查到他后面的牛牛先插，插完空间加1，如果这样都不能插那肯定不行，因为比你大的更插不进去</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%89%91%E5%85%8B%E7%89%8C%E6%9C%89%E8%8B%A5%E5%B9%B2%E7%A7%8D%E6%99%AE%E9%80%9A%E6%89%91%E5%85%8B%E7%89%8C%E5%90%84%E8%8B%A5%E5%B9%B2%E5%BC%A0%E8%B5%96%E5%AD%90%E7%89%8C%E8%8B%A5%E5%B9%B2%E5%BC%A0%E5%B7%B2%E7%9F%A5%E8%B5%96%E5%AD%90%E7%89%8C%E5%8F%AF%E4%BB%A5%E6%9B%BF%E6%8D%A2%E4%BB%BB%E6%84%8F%E6%99%AE%E9%80%9A%E7%89%8C-%E6%89%80%E6%9C%89%E6%89%91%E5%85%8B%E7%89%8C%E5%90%84%E4%B8%80%E5%BC%A0%E5%8F%AF%E4%BB%A5%E7%BB%84%E6%88%90%E4%B8%80%E5%A5%97%E7%89%8C%E4%B8%80%E5%A5%97%E7%89%8C%E4%B8%AD%E6%9C%80%E5%A4%9A%E5%8F%AA%E8%83%BD%E6%9C%89%E4%B8%80%E5%BC%A0%E8%B5%96%E5%AD%90%E7%89%8C%E9%A6%96%E5%85%88%E5%85%88%E7%A1%AE%E5%AE%9Acheck%E5%87%BD%E6%95%B0%E8%83%BD%E5%90%A6%E5%87%91%E6%88%90x%E5%A5%97%E7%89%8C%E5%8F%AF%E4%BB%A5%E8%BD%AC%E5%8C%96%E4%B8%BA%E9%9C%80%E8%A6%81%E5%A4%9A%E5%B0%91%E8%B5%96%E5%AD%90%E7%89%8C%E6%89%8D%E5%8F%AF%E4%BB%A5%E7%BB%84%E6%88%90x%E5%A5%97%E7%89%8C%E6%9C%80%E5%90%8E%E8%B5%96%E5%AD%90%E7%89%8C%E7%9A%84%E6%95%B0%E9%87%8F%E5%BA%94%E8%AF%A5%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8Eminx-mm%E6%98%AF%E8%B5%96%E5%AD%90%E7%89%8C%E5%8E%9F%E6%9C%89%E7%9A%84%E6%95%B0%E9%87%8F%E5%AF%B9%E4%BA%8E%E6%AF%8F%E4%B8%80%E7%A7%8D%E7%89%8C%E5%A6%82%E6%9E%9C%E6%95%B0%E9%87%8F%E4%B8%8D%E5%A4%9Fx%E5%BC%A0%E5%B0%B1%E7%94%A8%E8%B5%96%E5%AD%90%E7%89%8C%E8%A1%A5%E9%BD%90%E8%BF%99%E9%87%8C%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E6%98%AF%E4%B8%8D%E9%9C%80%E8%A6%81%E4%BD%A0%E7%A1%AE%E5%AE%9A%E5%85%B7%E4%BD%93%E7%89%8C%E6%98%AF%E6%80%8E%E4%B9%88%E5%88%86%E9%85%8D%E7%9A%84%E4%BD%A0%E5%8F%AA%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E5%8F%AA%E8%A6%81%E8%B5%96%E5%AD%90%E7%89%8C%E6%80%BB%E6%95%B0%E4%B8%8D%E8%B6%85%E8%BF%87x%E5%BC%A0%E6%AF%8F%E7%A7%8D%E7%89%8C%E9%83%BD%E6%9C%89x%E5%BC%A0%E7%AE%97%E4%B8%8A%E8%B5%96%E5%AD%90%E7%89%8C%E5%B0%B1%E4%B8%80%E5%AE%9A%E5%8F%AF%E4%BB%A5%E5%AE%8C%E6%88%90%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\"> 扑克牌：有若干种普通扑克牌各若干张，赖子牌若干张，已知赖子牌可以替换任意普通牌， 所有扑克牌各一张可以组成一套牌，一套牌中最多只能有一张赖子牌：首先先确定check函数，能否凑成x套牌？可以转化为需要多少赖子牌才可以组成x套牌，最后赖子牌的数量应该小于等于min(x, m)(m是赖子牌原有的数量)对于每一种牌，如果数量不够x张就用赖子牌补齐，这里要注意的是，不需要你确定具体牌是怎么分配的，你只需要知道只要赖子牌总数不超过x张，每种牌都有x张（算上赖子牌）就一定可以完成目标</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%ACk%E5%A4%A7%E7%9A%84%E6%95%B0%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%BA%8F%E5%88%97a%E5%AF%B9%E4%BA%8E%E5%85%B6%E6%89%80%E6%9C%89%E9%95%BF%E5%BA%A6%E5%A4%A7%E4%BA%8Ek%E7%9A%84%E5%AD%90%E5%8C%BA%E9%97%B4%E6%8A%8A%E5%85%B6%E4%B8%AD%E7%9A%84%E7%AC%ACk%E5%A4%A7%E7%9A%84%E6%95%B0%E5%8A%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E7%A9%BA%E5%BA%8F%E5%88%97%E6%B1%82%E8%BF%99%E7%A9%BA%E5%BA%8F%E5%88%97%E7%AC%ACm%E5%A4%A7%E7%9A%84%E6%95%B0%E6%9E%9A%E4%B8%BE%E8%BF%99%E4%B8%AA%E6%95%B0%E9%80%9A%E8%BF%87%E5%8F%8C%E6%8C%87%E9%92%88%E5%AF%BB%E6%89%BE%E5%8C%85%E5%90%AB%E8%87%B3%E5%B0%91k%E4%B8%AA%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E4%BA%8C%E5%88%86%E5%80%BC%E7%9A%84%E5%8C%BA%E9%97%B4%E6%95%B0%E9%87%8F%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8Em%E4%B8%AA%E5%8D%B3%E5%8F%AF\"><span class=\"toc-text\"> 第k大的数：给定一个序列A，对于其所有长度大于k的子区间，把其中的第k大的数加入一个空序列，求这空序列第m大的数：枚举这个数，通过双指针寻找包含至少k个大于等于二分值的区间数量，判断是否大于等于m个即可</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%86%E8%9B%8B%E7%B3%95%E4%B8%80%E4%B8%AA%E8%9B%8B%E7%B3%95%E8%A6%81%E5%88%87%E6%88%90ab%E4%BB%BD%E5%BF%85%E9%A1%BB%E6%A8%AA%E5%90%91a-1%E5%88%80%E7%BA%B5%E5%90%91b-1%E8%A1%8C-%E6%B1%82%E4%B8%80%E7%A7%8D%E5%88%87%E6%B3%95%E4%BD%BF%E5%BE%97%E6%9C%80%E5%B0%8F%E7%9A%84%E8%9B%8B%E7%B3%95%E6%9C%80%E5%A4%A7%E4%B8%A4%E4%B8%AA%E5%9D%90%E6%A0%87%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%9F%A9%E5%BD%A2%E6%89%80%E4%BB%A5%E4%BC%98%E5%85%88%E8%AE%BE%E5%AE%9A%E5%B7%A6%E4%B8%8A%E8%A7%92%E7%9A%84%E5%80%BC%E5%8F%B3%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC%E7%9B%B4%E5%88%B0%E5%88%87%E5%87%BA%E6%9D%A5%E7%9A%84%E5%80%BC%E5%A4%A7%E4%BA%8E%E4%BA%8C%E5%88%86%E5%80%BC%E5%86%8D%E5%88%87%E8%80%8C%E4%B8%94%E5%A6%82%E6%9E%9C%E5%8F%91%E7%8E%B0%E7%BA%B5%E5%90%91%E4%B8%8D%E5%A4%9Fb%E4%B8%AA%E5%88%99%E6%94%BE%E5%BC%83%E6%9C%AC%E6%AC%A1%E5%88%87%E5%90%A6%E5%88%99%E6%9B%B4%E6%94%B9%E5%B7%A6%E4%B8%8A%E8%A7%92%E7%9A%84%E5%9D%90%E6%A0%87%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\"> 分蛋糕：一个蛋糕要切成A*B份，必须横向A-1刀，纵向B-1行， 求一种切法使得最小的蛋糕最大，两个坐标确定一个矩形，所以优先设定左上角的值，右下角的值直到切出来的值大于二分值再切，而且如果发现纵向不够B个则放弃本次切，否则更改左上角的坐标位置</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98\"><span class=\"toc-text\"> 二分递归解决问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E6%95%B0%E5%B7%AE%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E5%AF%B9%E4%BA%8E%E4%BB%BB%E6%84%8F%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97%E5%85%B6%E4%BD%8D%E6%95%B0%E5%B7%AE%E5%AE%9A%E4%B9%89%E4%B8%BA%E5%8F%B3%E8%BE%B9%E7%9A%84%E6%95%B0%E5%AD%97%E5%8A%A0%E4%B8%8A%E5%B7%A6%E8%BE%B9%E7%9A%84%E6%95%B0%E5%AD%97%E5%BE%97%E5%88%B0%E7%9A%84%E6%95%B0%E5%AD%97%E4%BD%8D%E6%95%B0%E6%AF%94%E5%B7%A6%E9%9D%A2%E7%9A%84%E6%95%B0%E5%AD%97%E5%A4%A7%E5%87%A0%E4%BD%8D%E6%B1%82%E8%BF%99%E4%B8%AA%E6%95%B0%E7%BB%84%E4%BD%8D%E6%95%B0%E5%B7%AE%E4%B9%8B%E5%92%8C%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%8D%E6%95%B0%E5%B7%AE%E4%B9%8B%E5%92%8C%E7%AD%89%E4%BA%8E%E5%B7%A6%E5%8C%BA%E9%97%B4%E7%9A%84%E7%AD%94%E6%A1%88%E5%8A%A0%E4%B8%8A%E5%8F%B3%E5%8C%BA%E9%97%B4%E7%9A%84%E7%AD%94%E6%A1%88%E5%A4%96%E5%8A%A0%E5%B7%A6%E5%8C%BA%E9%97%B4%E7%9A%84%E6%AF%8F%E4%B8%AA%E6%95%B0%E5%AF%B9%E4%BA%8E%E5%8F%B3%E5%8C%BA%E9%97%B4%E6%AF%8F%E4%B8%AA%E6%95%B0%E6%89%80%E4%BA%A7%E7%94%9F%E7%9A%84%E4%BD%8D%E6%95%B0%E5%B7%AE%E7%9A%84%E8%B4%A1%E7%8C%AE%E4%BA%8B%E5%85%88%E8%AE%BE%E5%AE%9A%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E5%AD%98%E6%9C%8910%E7%9A%84%E5%B9%82%E7%BA%A7%E5%9C%A8%E9%80%92%E5%BD%92%E6%97%B6%E5%B0%86%E5%8F%B3%E5%8C%BA%E9%97%B4%E6%8E%92%E5%BA%8F%E5%AF%B9%E4%BA%8E10%E7%9A%84%E6%AF%8F%E4%B8%AA%E5%B9%82%E7%BA%A7%E5%9C%A8%E5%8F%B3%E5%8C%BA%E9%97%B4%E7%9B%B4%E6%8E%A5%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%80%8C%E7%94%B1%E4%BA%8E%E5%8D%95%E6%AC%A1%E4%BA%A7%E7%94%9F%E7%9A%84%E5%B7%AE%E5%80%BC%E6%81%B0%E5%A5%BD%E4%B8%8E%E4%B8%A4%E4%B8%AA%E6%95%B0%E4%B9%8B%E9%97%B4%E5%8C%85%E5%90%AB%E4%BA%86%E5%87%A0%E4%B8%AA10%E7%9A%84%E5%B9%82%E7%BA%A7%E7%9B%B8%E5%90%8C%E6%89%80%E4%BB%A5%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%BC%9A%E5%87%BA%E9%94%99\"><span class=\"toc-text\"> 位数差：给定一个数组，对于任意两个数字，其位数差定义为右边的数字加上左边的数字得到的数字位数比左面的数字大几位，求这个数组位数差之和：一个数组的位数差之和等于左区间的答案加上右区间的答案外加左区间的每个数对于右区间每个数所产生的位数差的贡献，事先设定一个数组存有10的幂级，在递归时，将右区间排序，对于10的每个幂级，在右区间直接二分查找，而由于单次产生的差值恰好与两个数之间包含了几个10的幂级相同，所以结果不会出错</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%88%86%E7%AD%94%E6%A1%88\"><span class=\"toc-text\"> 三分答案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E9%80%81%E5%B8%A6%E6%9C%89%E4%B8%A4%E6%9D%A1%E7%BA%BF%E6%AE%B5%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%B8%AA%E5%B9%B3%E9%9D%A2%E6%9C%89%E4%B8%80%E4%B8%AA%E7%89%A9%E5%9D%97%E6%83%B3%E4%BB%8E%E5%85%B6%E4%B8%AD%E4%B8%80%E6%9D%A1%E7%BA%BF%E6%AE%B5%E7%9A%84%E7%AB%AF%E7%82%B9%E7%A7%BB%E5%8A%A8%E5%88%B0%E5%8F%A6%E4%B8%80%E6%9D%A1%E7%BA%BF%E6%AE%B5%E7%9A%84%E7%AB%AF%E7%82%B9%E5%85%B6%E4%B8%AD%E4%B8%89%E6%9D%A1%E7%BA%BF%E6%AE%B5%E7%9A%84%E7%A7%BB%E5%8A%A8%E9%80%9F%E5%BA%A6%E5%90%84%E4%B8%8D%E7%9B%B8%E5%90%8C%E6%B1%82%E6%89%80%E8%8A%B1%E6%97%B6%E9%97%B4%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC%E5%A6%82%E6%9E%9C%E5%9B%BA%E5%AE%9A%E7%AC%AC%E4%B8%80%E6%9D%A1%E7%BA%BF%E6%AE%B5%E7%9A%84%E5%80%BC%E5%8F%91%E7%8E%B0%E5%AF%B9%E4%BA%8E%E5%8F%A6%E4%B8%80%E6%9D%A1%E7%BA%BF%E6%AE%B5%E4%B8%8A%E7%9A%84%E7%82%B9%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8D%95%E5%B3%B0%E5%87%BD%E6%95%B0%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%B8%89%E5%88%86%E8%A7%A3%E5%86%B3%E5%90%8C%E6%97%B6%E5%9B%BA%E5%AE%9A%E7%AC%AC%E4%B8%80%E6%9D%A1%E7%BA%BF%E6%AE%B5%E5%80%BC%E8%BF%99%E4%B8%AA%E8%BF%87%E7%A8%8B%E4%B9%9F%E6%98%AF%E4%B8%80%E4%B8%AA%E4%B8%89%E5%88%86%E7%9A%84%E8%BF%87%E7%A8%8B%E6%89%80%E4%BB%A5%E6%98%AF%E4%B8%89%E5%88%86%E5%A5%97%E4%B8%89%E5%88%86%E5%8F%A6%E5%A4%96%E8%BF%98%E6%9C%89%E4%B8%80%E7%A7%8D%E8%A7%A3%E6%B3%95%E5%8D%B3%E7%BB%86%E5%88%86%E4%B8%A4%E6%9D%A1%E7%BA%BF%E6%AE%B5%E5%8C%BA%E9%97%B4%E4%BE%9D%E6%AC%A1%E6%9E%9A%E4%B8%BE%E6%B1%82%E6%9C%80%E5%B0%8F%E5%80%BC%E5%8D%B3%E5%8F%AF%E5%85%B7%E4%BD%93%E7%BB%86%E5%88%86%E7%A8%8B%E5%BA%A6%E8%A6%81%E8%80%83%E8%99%91%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%E5%92%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\"> 传送带：有两条线段以及一个平面，有一个物块想从其中一条线段的端点移动到另一条线段的端点，其中三条线段的移动速度各不相同，求所花时间的最小值，如果固定第一条线段的值，发现对于另一条线段上的点是一个单峰函数，可以用三分解决，同时固定第一条线段值这个过程也是一个三分的过程，所以是三分套三分，另外还有一种解法，即细分两条线段区间，依次枚举，求最小值即可，具体细分程度要考虑浮点数精度和时间复杂度</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E6%9C%89%E8%8B%A5%E5%B9%B2%E9%97%A8%E8%AF%BE%E7%A8%8B%E5%8F%91%E5%B8%83%E6%97%B6%E9%97%B4%E6%9C%89%E8%8B%A5%E5%B9%B2%E5%90%8C%E5%AD%A6%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E6%9C%89%E6%9C%9F%E6%9C%9B%E7%9A%84%E6%89%80%E6%9C%89%E8%AF%BE%E7%A8%8B%E5%8F%91%E5%B8%83%E7%9A%84%E6%97%B6%E9%97%B4%E8%AF%A5%E6%97%B6%E9%97%B4%E6%99%9A%E4%B8%80%E5%A4%A9%E5%B0%B1%E4%BC%9A%E4%BA%A7%E7%94%9F%E4%B8%80%E5%AE%9A%E7%9A%84%E4%B8%8D%E6%84%89%E5%BF%AB%E5%BA%A6%E5%90%8C%E6%97%B6%E8%BF%98%E6%9C%89%E4%B8%A4%E7%A7%8D%E8%B0%83%E6%95%B4%E8%AF%BE%E7%A8%8B%E5%8F%91%E5%B8%83%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%80%E7%A7%8D%E6%98%AF%E7%9B%B4%E6%8E%A5%E6%8F%90%E5%89%8D%E6%9F%90%E9%97%A8%E8%AF%BE%E7%9A%84%E6%97%B6%E9%97%B4b%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%98%AF%E5%BB%B6%E5%90%8E%E6%9F%90%E4%B8%80%E9%97%A8%E8%80%8C%E6%8F%90%E5%89%8D%E5%8F%A6%E4%B8%80%E9%97%A8a%E8%BF%99%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E5%90%84%E8%87%AA%E6%8B%A5%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84%E6%84%89%E5%BF%AB%E5%BA%A6%E6%B1%82%E6%80%BB%E4%BD%93%E4%BA%A7%E7%94%9F%E7%9A%84%E6%9C%80%E5%B0%8F%E6%84%89%E5%BF%AB%E5%BA%A6%E6%96%B9%E6%B3%95%E6%98%AF%E6%9A%B4%E5%8A%9B%E5%BC%BA%E8%A1%8C%E9%80%9A%E8%BF%87%E6%9E%9A%E4%B8%BE%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E4%BD%BF%E6%9F%90%E4%B8%80%E7%A7%8D%E5%8F%82%E6%95%B0%E7%A1%AE%E5%AE%9A%E4%B8%8B%E6%9D%A5%E8%80%8C%E5%88%86%E6%9E%90%E5%8F%A6%E5%A4%96%E7%9A%84%E5%9B%A0%E7%B4%A0%E6%89%80%E4%BB%A5%E7%9B%B4%E6%8E%A5%E6%9E%9A%E4%B8%BE%E8%AF%BE%E7%A8%8B%E5%8F%91%E5%B8%83%E7%9A%84%E6%9C%80%E6%99%9A%E6%97%B6%E9%97%B4%E6%80%BB%E4%B8%8D%E6%84%89%E5%BF%AB%E5%BA%A6%E7%94%B1%E4%B8%A4%E9%83%A8%E5%88%86%E7%A1%AE%E5%AE%9A%E4%B8%80%E7%A7%8D%E6%98%AF%E5%AD%A6%E7%94%9F%E7%9A%84%E4%B8%8D%E6%84%89%E5%BF%AB%E5%BA%A6%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%A6%82%E6%9E%9Cb%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8Ea%E7%9A%84%E8%AF%9D%E8%82%AF%E5%AE%9A%E5%85%A8%E7%94%A8b-%E5%90%A6%E5%88%99%E4%BC%98%E5%85%88%E7%94%A8a-%E4%BD%86%E6%98%AF%E8%A6%81%E8%80%83%E8%99%91a%E6%9C%80%E5%A4%9A%E8%83%BD%E7%94%A8%E5%A4%9A%E5%B0%91\"><span class=\"toc-text\"> 期末考试：有若干门课程发布时间，有若干同学，每个人都有期望的所有课程发布的时间，该时间晚一天就会产生一定的不愉快度，同时还有两种调整课程发布时间的方法，一种是直接提前某门课的时间B，另一种是延后某一门而提前另一门A，这两种方法各自拥有不同的愉快度，求总体产生的最小愉快度：方法是暴力：强行通过枚举的方式来使某一种参数确定下来而分析另外的因素，所以直接枚举课程发布的最晚时间，总不愉快度由两部分确定，一种是学生的不愉快度，另一种如果B小于等于A的话肯定全用B， 否则优先用A， 但是要考虑A最多能用多少</span></a></li></ol></li></ol></li></ol>","author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}},"mapped":true,"prev_post":{"title":"思维","uid":"8a05039005e8271de59259f4550f4e1d","slug":"思维1500-1700","date":"2022-10-05T08:09:56.000Z","updated":"2022-10-05T13:59:10.278Z","comments":true,"path":"api/articles/思维1500-1700.json","keywords":null,"cover":null,"text":" codeforces#823-div2-B 题意：一维坐标系有n个人，各自的坐标为xix_ixi​，每个人需要ti的时间才能出发，问需要多长时间才能让所有人聚集到一个地方 解答：若每个人所需要的时间tit_iti​都是0的话，则答案为xmax+xmin2\\frac{x_{max...","link":"","photos":[],"count_time":{"symbolsCount":538,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},"next_post":{"title":"数据结构","uid":"81579b6c641dedc829a2b0058112fc0c","slug":"数据结构","date":"2022-07-27T10:16:02.000Z","updated":"2022-07-28T12:39:54.099Z","comments":true,"path":"api/articles/数据结构.json","keywords":null,"cover":null,"text":" 1.RMQ-st表 离线查询区间最值 template&lt;class T, class Cmp &#x3D; less&lt;T&gt;&gt; &#x2F;&#x2F;定义模版：数据类型和比较方式，默认广义小于 struct RMQ&#123; const int n;&...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}}}