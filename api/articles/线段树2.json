{"title":"线段树2","uid":"001dbd05b69938b44aa0e24828eb90f6","slug":"线段树2","date":"2022-04-18T15:16:53.000Z","updated":"2022-04-18T15:17:17.692Z","comments":true,"path":"api/articles/线段树2.json","keywords":null,"cover":null,"content":"<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">void init()&#123;\n    for (int i&#x3D;1;i&lt;&#x3D;n;++i)&#123;\n        a[i]&#x3D;read();\n    &#125;\n&#125;&#x2F;&#x2F;初始化\ninline ll ls(long p) &#123;return p&lt;&lt;1;&#125;\ninline ll rs(long p) &#123;return p&lt;&lt;1|1;&#125;\n\ninline void pull_up(ll p)&#123;\n    ans[p]&#x3D;(ans[ls(p)]+ans[rs(p)])%MOD;\n&#125;&#x2F;&#x2F;回溯区间维护的值（这里是区间和取模）\n\ninline void f(ll p,ll l,ll r,ll k1,ll k2)&#123;\n    tag1[p]&#x3D;(tag1[p]*k2+k1)%MOD;&#x2F;&#x2F;加法标记更改，乘法会影响加法标记\n    tag2[p]&#x3D;(tag2[p]*k2)%MOD;&#x2F;&#x2F;乘法标记更改\n    ans[p]&#x3D;(ans[p]*k2+k1*(r-l+1))%MOD;&#x2F;&#x2F;在线修改区间维护的值（这里是区间和取模）为维持精度，先乘法再加法\n&#125;\n\ninline void push_down(ll p,ll l,ll r)&#123;\n    ll mid&#x3D;(l+r)&gt;&gt;1;\n    f(ls(p),l,mid,tag1[p],tag2[p]);\n    f(rs(p),mid+1,r,tag1[p],tag2[p]);\n    tag1[p]&#x3D;0;tag2[p]&#x3D;1;&#x2F;&#x2F;清除父节点标记\n&#125;\n&#x2F;&#x2F;父节点依据lazytag对子节点传递信息：我的子节点要有怎样的改变，同时我的子节点所管理的区间应该是怎样的\nvoid build(ll p,ll l,ll r)&#123;\n    tag1[p]&#x3D;0;tag2[p]&#x3D;1;\n    if(l&#x3D;&#x3D;r)&#123;\n        ans[p]&#x3D;a[l];\n        return;\n    &#125;\n    ll mid&#x3D;(l+r)&gt;&gt;1;\n    &#x2F;&#x2F;递归建树\n    build(ls(p),l,mid);\n    build(rs(p),mid+1,r);\n    pull_up(p);\n    &#x2F;&#x2F;回溯\n&#125;\nvoid add(ll nl,ll rl,ll p,ll l,ll r,ll k)&#123;\n    if(nl&lt;&#x3D;l&amp;&amp;r&lt;&#x3D;rl)&#123;\n        &#x2F;&#x2F;在目标区间直接在线更新维护的值和lazytag\n        tag1[p]&#x3D;(tag1[p]+k)%MOD;\n        ans[p]&#x3D;(ans[p]+k*(r-l+1))%MOD;\n        return;\n    &#125;\n    push_down(p,l,r);&#x2F;&#x2F;向下传递lazytag\n    ll mid&#x3D;(l+r)&gt;&gt;1;\n    if(nl&lt;&#x3D;mid) add(nl,rl,ls(p),l,mid,k);\n    if(rl&gt;mid) add(nl,rl,rs(p),mid+1,r,k);\n    pull_up(p);&#x2F;&#x2F;回溯\n&#125;\nvoid mul(ll nl,ll rl,ll p,ll l,ll r,ll k)&#123;\n    if(nl&lt;&#x3D;l&amp;&amp;r&lt;&#x3D;rl)&#123;\n        &#x2F;&#x2F;乘法lazytag会对加法lazytag产生影响\n        tag1[p]&#x3D;(tag1[p]*k)%MOD;\n        tag2[p]&#x3D;(tag2[p]*k)%MOD;\n        ans[p]&#x3D;(ans[p]*k)%MOD;\n        return;\n    &#125;\n    push_down(p,l,r);\n    ll mid&#x3D;(l+r)&gt;&gt;1;\n    if(nl&lt;&#x3D;mid) mul(nl,rl,ls(p),l,mid,k);\n    if(rl&gt;mid) mul(nl,rl,rs(p),mid+1,r,k);\n    pull_up(p);\n&#125;\nll index(ll nl,ll rl,ll p,ll l,ll r)&#123;\n    if(nl&lt;&#x3D;l&amp;&amp;r&lt;&#x3D;rl) return ans[p]%MOD;\n    long sum&#x3D;0;\n    push_down(p,l,r);\n    ll mid&#x3D;(l+r)&gt;&gt;1;\n    if(nl&lt;&#x3D;mid) sum&#x3D;(sum+index(nl,rl,ls(p),l,mid))%MOD;\n    if(rl&gt;mid) sum&#x3D;(sum+index(nl,rl,rs(p),mid+1,r))%MOD;\n    return sum;\n&#125;</code></pre>\n","text":"void init()&#123; for (int i&#x3D;1;i&lt;&#x3D;n;++i)&#123; a[i]&#x3D;read(); &#125; &#125;&#x2F;&#x2F;初始化 inline ll ls(long p) &#123;return...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}},"mapped":true,"prev_post":{"title":"树状数组1","uid":"a9af62bfd9db986968c6d2172b939d09","slug":"树状数组1","date":"2022-04-19T06:36:42.000Z","updated":"2022-04-19T06:38:14.421Z","comments":true,"path":"api/articles/树状数组1.json","keywords":null,"cover":[],"text":"#include&lt;bits&#x2F;stdc++.h&gt; #define ll long long #define MAX 500001 using namespace std; ll read()&#123; char c&#x3D;getchar();ll x&#...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},"next_post":{"title":"线段树1","uid":"da049d4802afb8f23eb9317447dbf0d1","slug":"线段树1","date":"2022-04-17T13:15:53.000Z","updated":"2022-04-17T13:16:55.632Z","comments":true,"path":"api/articles/线段树1.json","keywords":null,"cover":null,"text":"#include&lt;bits&#x2F;stdc++.h&gt; #define MAXN 100001 &#x2F;&#x2F;线段数模版 &#x2F;&#x2F;查询：区间和 &#x2F;&#x2F;更改：区间每个数加k using namespace std; long...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}}}