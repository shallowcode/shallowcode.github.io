{"title":"树(1)","uid":"470c309602da5c2e94f04f070eda269c","slug":"树1","date":"2021-11-30T02:18:26.000Z","updated":"2021-11-30T12:42:08.896Z","comments":true,"path":"api/articles/树1.json","keywords":null,"cover":[],"content":"<h1 id=\"树\"><a class=\"markdownIt-Anchor\" href=\"#树\"></a> 树</h1>\n<h3 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\"></a> 查找</h3>\n<p>数据管理的基本操作之一是查找：即根据某个给定的关键字K，从集合R中找出与K相同的记录</p>\n<ul>\n<li>静态查找：集合中的记录是固定的</li>\n<li>动态查找：集合中的记录是动态变化的，除查找外还可能发生插入和删除</li>\n</ul>\n<p><strong>——如何实现有效率的查找？</strong></p>\n<p>方法一：顺序查找</p>\n<p>遍历给定数组，找到目标元素或遍历完全部元素则结束遍历，此时时间复杂度为**<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>**</p>\n<p>方法二：二分查找</p>\n<p>假设n个数据元素的关键字<strong>满足有序并且连续存放</strong>，可以进行二分查找</p>\n<p>即每次查找取一个左边界点和一个右边界点，取其中点进行判断，判断呆查找关键字与其大小关系，依此来更新查找范围,此时时间复杂度为**<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>**</p>\n<h3 id=\"二分查找判定树\"><a class=\"markdownIt-Anchor\" href=\"#二分查找判定树\"></a> 二分查找判定树</h3>\n<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gwx0s7ei6wj30qa0nk3zj.jpg\" alt=\"截屏2021-11-30 上午10.44.38\" style=\"zoom: 25%;\" />\n<ul>\n<li>判定树上的每个结点需要的查找次数刚好为该结点所在的层数</li>\n<li>查找成功时查找次数不会超过判定树的深度</li>\n<li>n个结点的判定树的深度为**<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">[\\log n]+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>**</li>\n</ul>\n<h3 id=\"树的定义\"><a class=\"markdownIt-Anchor\" href=\"#树的定义\"></a> 树的定义</h3>\n<ol>\n<li>树：n个结点构成的有限集合，树中有一个称为根的特殊结点，用root表示，其余结点可以分为不相交的有限集合，每个集合称为子树</li>\n<li>结点的度：结点的子树个树</li>\n<li>树的度：结点最大的度数</li>\n<li>叶结点：度为0的结点</li>\n<li>父结点：有子树的结点时期子树根结点的父结点</li>\n<li>子结点：与父结点对应</li>\n<li>兄弟结点：同一个父结点</li>\n<li>结点层次：规定根结点在第一层，其余结点依据其父结点层次加1</li>\n<li>树的深度：结点的最大层次</li>\n<li>树的表示：采用两个指针域，一个指向长子一个指向兄弟结点。倾斜此树形成二叉树</li>\n</ol>\n<h1 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\"></a> 二叉树</h1>\n<h2 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义：</h2>\n<p>​\t\t\t可以为空的有穷结点的集合，由根结点和其左右子树组成</p>\n<h2 id=\"特殊二叉树\"><a class=\"markdownIt-Anchor\" href=\"#特殊二叉树\"></a> 特殊二叉树：</h2>\n<ul>\n<li>斜二叉树</li>\n<li>完美二叉树/满二叉树</li>\n<li>完全二叉树</li>\n</ul>\n<h2 id=\"重要性质\"><a class=\"markdownIt-Anchor\" href=\"#重要性质\"></a> 重要性质：</h2>\n<ul>\n<li>一个二叉树的第i层的最大结点数量是**<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>**,i&gt;0</li>\n<li>深度为k的二叉树有的最大结点数量为**<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^k-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.932438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>**个,k&gt;0</li>\n<li>对任何非空二叉树而言若用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">n_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>来表示度为0的结点的个数，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">n_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>来表示度为2的结点的个数，有**<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n_0=n_2+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>**成立</li>\n</ul>\n<h2 id=\"存储结构\"><a class=\"markdownIt-Anchor\" href=\"#存储结构\"></a> 存储结构：</h2>\n<ol>\n<li>\n<p>顺序存储结构：<br />\n适用于完全二叉树，结点为i的结点其父子树结点为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mfrac><mi>i</mi><mn>2</mn></mfrac><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[\\frac{i}{2}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.200664em;vertical-align:-0.345em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.855664em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">]</span></span></span></span>,其左孩子的序号为2i，右孩子序号为2i+1</p>\n</li>\n<li>\n<p>链式存储结构：</p>\n<p>一般采用数据域加指向左右两孩子的指针域</p>\n</li>\n</ol>\n<h2 id=\"二叉树的遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的遍历\"></a> 二叉树的遍历：</h2>\n<ul>\n<li>先序遍历</li>\n<li>中序遍历</li>\n<li>后序遍历</li>\n</ul>\n<h3 id=\"递归实现\"><a class=\"markdownIt-Anchor\" href=\"#递归实现\"></a> 递归实现：</h3>\n<p>​\t\t\t基本思路：将访问一棵树的过程抽象为：访问该树的根结点，若空则返回，若非空则依次访问其左右子树，所谓的遍历方式不同仅仅区别在何时打印出根结点</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void OrderTraversal(BinTree BT)&#123;\n  if(BT) &#123;\n    printf(&quot;%d&quot;,BT-&gt;Data);&#x2F;&#x2F;打印顺序不同则代表了不同的遍历方式\n    OrderTraversal(BT-&gt;left);\n    OrderTraversal(BT-&gt;right);\n\t&#125;\n&#125;</code></pre>\n<h3 id=\"非递归实现截屏2021-11-30-下午70508\"><a class=\"markdownIt-Anchor\" href=\"#非递归实现截屏2021-11-30-下午70508\"></a> 非递归实现<img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gwxgmg4qtaj30yy0kitag.jpg\" alt=\"截屏2021-11-30 下午7.05.08\" /></h3>\n<p>​\t\t显然遍历树的方式不同但走过的路径相同，不妨将递归实现中的打印时机抽象为遍历树时对每个结点都访问三次。即初遇结点为第一次，遍历完结点左子树回来时为第二次，遍历完结点右子树回来时为第三次，在程序中我们将第一次访问抽象为push该结点到一个栈中，第二次访问抽象为将该结点从栈中pop出来</p>\n<ul>\n<li>先序遍历，在push时打印结点</li>\n<li>中序遍历，在pop时打印结点</li>\n<li>后序遍历，以根右左的形式进行先序遍历再倒序输出</li>\n</ul>\n<p>ex：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void PostorderTraversalStack(BinTree BT) &#123;\n    BinTree T&#x3D;BT;&#x2F;&#x2F;从根结点开始遍历\n    Stack S &#x3D; CreateStack(MAXSIZE); &#x2F;&#x2F;创建栈\n    while (!IsEmpty(S) || T) &#123;\t\t\t&#x2F;&#x2F;还有没被访问的元素（1，2次）\n        while (T) &#123;   \t\t\t\t\t\t\t&#x2F;&#x2F;一直向左并将沿途结点压入堆栈\n            Push(S, T);\n            T &#x3D; T-&gt;left;   &#x2F;&#x2F;右\n        &#125;\n        while (!IsEmpty(S)) &#123;\n            T &#x3D; pop(S);   &#x2F;*结点弹出堆栈，第二次访问*&#x2F;\n            T &#x3D; T-&gt;right;    &#x2F;&#x2F;左\n        &#125;\n    &#125;</code></pre>\n<ul>\n<li>层序遍历：用一个队列保存遍历到的结点的子结点，按顺序访问队列中的结点即可</li>\n</ul>\n","text":" 树 查找 数据管理的基本操作之一是查找：即根据某个给定的关键字K，从集合R中找出与K相同的记录 静态查找：集合中的记录是固定的 动态查找：集合中的记录是动态变化的，除查找外还可能发生插入和删除 ——如何实现有效率的查找？ 方法一：顺序查找 遍历给定数组，找到目标元素或遍历完全部...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"学习心得","slug":"学习心得","count":2,"path":"api/categories/学习心得.json"}],"tags":[{"name":"浙大数据结构","slug":"浙大数据结构","count":2,"path":"api/tags/浙大数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%91\"><span class=\"toc-text\"> 树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\"> 查找</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%88%A4%E5%AE%9A%E6%A0%91\"><span class=\"toc-text\"> 二分查找判定树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\"> 树的定义</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\"> 二叉树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\"> 定义：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\"> 特殊二叉树：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%A6%81%E6%80%A7%E8%B4%A8\"><span class=\"toc-text\"> 重要性质：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\"> 存储结构：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86\"><span class=\"toc-text\"> 二叉树的遍历：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\"> 递归实现：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%88%AA%E5%B1%8F2021-11-30-%E4%B8%8B%E5%8D%8870508\"><span class=\"toc-text\"> 非递归实现</span></a></li></ol></li></ol></li></ol>","author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}},"mapped":true,"prev_post":{"title":"树(2)","uid":"447383d49ff18b4226a8582f8b4b6f53","slug":"树2","date":"2021-11-30T12:51:58.000Z","updated":"2021-12-01T14:53:42.736Z","comments":true,"path":"api/articles/树2.json","keywords":null,"cover":null,"text":" 二叉搜索树 定义： 非空左子树所有键值小于根结点 非空右子树所有键值大于根结点 左右子树都是二叉搜索树 查找-Find 查找某一给定键值元素：若比根结点大则去右子树找反之去左子树 查找最大值/最小值：给定树的最右边或者最左边 二叉搜索树的插入：即找到元素后插入 删除-Delet...","link":"","photos":[],"count_time":{"symbolsCount":694,"symbolsTime":"1 mins."},"categories":[{"name":"学习心得","slug":"学习心得","count":2,"path":"api/categories/学习心得.json"}],"tags":[{"name":"浙大数据结构","slug":"浙大数据结构","count":2,"path":"api/tags/浙大数据结构.json"}],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},"next_post":{"title":"飞盘新秀赛","uid":"116a0a10bb25c5d4c34813a7b24e608c","slug":"飞盘新秀赛","date":"2021-11-28T11:17:04.000Z","updated":"2021-11-30T07:49:44.139Z","comments":true,"path":"api/articles/飞盘新秀赛.json","keywords":null,"cover":[],"text":" 飞盘新秀赛 开始 因为这学期的必修体育课我选择了极限飞盘，所以作为课程成绩的一部分，我选择了参加第二届极限飞盘的新秀杯。说来遗憾，我在去年大一的时候也选择过极限飞盘的选修课但是当时没报，这次也算弥补了。 第一天 抱着自我感觉良好的态度，在打第一场比赛之前我是抱着很轻松的态度去应...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"回忆","slug":"回忆","count":3,"path":"api/categories/回忆.json"}],"tags":[{"name":"运动","slug":"运动","count":1,"path":"api/tags/运动.json"},{"name":"团队","slug":"团队","count":1,"path":"api/tags/团队.json"}],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}}}