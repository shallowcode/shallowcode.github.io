{"title":"树(2)","uid":"447383d49ff18b4226a8582f8b4b6f53","slug":"树2","date":"2021-11-30T12:51:58.000Z","updated":"2021-12-01T14:53:42.736Z","comments":true,"path":"api/articles/树2.json","keywords":null,"cover":null,"content":"<h1 id=\"二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#二叉搜索树\"></a> 二叉搜索树</h1>\n<h3 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义：</h3>\n<ol>\n<li>非空左子树所有键值小于根结点</li>\n<li>非空右子树所有键值大于根结点</li>\n<li>左右子树都是二叉搜索树</li>\n</ol>\n<h3 id=\"查找-find\"><a class=\"markdownIt-Anchor\" href=\"#查找-find\"></a> 查找-Find</h3>\n<ul>\n<li>查找某一给定键值元素：若比根结点大则去右子树找反之去左子树</li>\n<li>查找最大值/最小值：给定树的最右边或者最左边</li>\n<li>二叉搜索树的插入：即找到元素后插入</li>\n</ul>\n<h3 id=\"删除-delete\"><a class=\"markdownIt-Anchor\" href=\"#删除-delete\"></a> 删除-Delete</h3>\n<ol>\n<li>删除叶结点：直接删除，父结点指向NULL</li>\n<li>删除有一个子结点的结点：将其父结点的指针指向子结点</li>\n<li>删除有两个子结点的结点：从左子树中的最大值或者右子树的最小值找出一个来替代（转化为删除该结点）</li>\n</ol>\n<h1 id=\"平衡二叉树\"><a class=\"markdownIt-Anchor\" href=\"#平衡二叉树\"></a> 平衡二叉树</h1>\n<h3 id=\"定义-2\"><a class=\"markdownIt-Anchor\" href=\"#定义-2\"></a> 定义：</h3>\n<ul>\n<li>平衡因子：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mi>F</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>h</mi><mi>L</mi></msub><mo>−</mo><msub><mi>h</mi><mi>R</mi></msub></mrow><annotation encoding=\"application/x-tex\">BF(T)=h_L-h_R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>L</mi></msub><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">h_L,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>h</mi><mi>R</mi></msub></mrow><annotation encoding=\"application/x-tex\">h_R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>分别左右子树的高度(层次)</li>\n<li>平衡二叉树(AVL树)：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mi>F</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">BF(T)\\leq1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>（包括空树）</li>\n</ul>\n<h3 id=\"性质\"><a class=\"markdownIt-Anchor\" href=\"#性质\"></a> 性质</h3>\n<ul>\n<li>给定结点为n的AVL树的最大高度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h3 id=\"平衡二叉树的调整\"><a class=\"markdownIt-Anchor\" href=\"#平衡二叉树的调整\"></a> 平衡二叉树的调整</h3>\n<ul>\n<li>概念：当插入一个新结点使得平衡二叉树不再平衡时，该结点称为破坏者，从该结点向上找父结点，则第一个被找到的不平衡的父结点称为发现者</li>\n<li>LL/RR插入：如果破坏者是发现者的左子树根结点的左子树上的点，则将发现者左子树的根结点（拎起来）作为新的根结点，其余结点按照二叉搜索树的规则有序排列（右子树根结点的右子树同理）</li>\n<li>LR?RL插入：如果破坏者是发现者的左子树根结点的右子树上的点，则将发现者，发现者的左子树的根结点，破坏者进行平衡，随后按照二叉搜索树的原则将断裂开的其余子树链接（右子树根结点的左子树同理）</li>\n</ul>\n","text":" 二叉搜索树 定义： 非空左子树所有键值小于根结点 非空右子树所有键值大于根结点 左右子树都是二叉搜索树 查找-Find 查找某一给定键值元素：若比根结点大则去右子树找反之去左子树 查找最大值/最小值：给定树的最右边或者最左边 二叉搜索树的插入：即找到元素后插入 删除-Delet...","link":"","photos":[],"count_time":{"symbolsCount":694,"symbolsTime":"1 mins."},"categories":[{"name":"学习心得","slug":"学习心得","count":2,"path":"api/categories/学习心得.json"}],"tags":[{"name":"浙大数据结构","slug":"浙大数据结构","count":2,"path":"api/tags/浙大数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91\"><span class=\"toc-text\"> 二叉搜索树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\"> 定义：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE-find\"><span class=\"toc-text\"> 查找-Find</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4-delete\"><span class=\"toc-text\"> 删除-Delete</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\"> 平衡二叉树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-2\"><span class=\"toc-text\"> 定义：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%B4%A8\"><span class=\"toc-text\"> 性质</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%B0%83%E6%95%B4\"><span class=\"toc-text\"> 平衡二叉树的调整</span></a></li></ol></li></ol></li></ol>","author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}},"mapped":true,"prev_post":{"title":"开发日志","uid":"9fc91c89821b2cef82964b56dfea7164","slug":"log","date":"2021-11-25T15:37:04.000Z","updated":"2021-11-30T07:43:20.129Z","comments":true,"path":"api/articles/log.json","keywords":null,"cover":null,"text":" 2021.11.26 完善了个人资料卡的展示，添加了一个话痨小机器人，准备在有空的时候调教一番 2021.11.25 开发者在寻求html+css+js来创建自己的网站时逐渐破防，遂选择了Hexo来搭建属于自己的网站，主题选择了非常wonderful的aurora ","link":"","photos":[],"count_time":{"symbolsCount":135,"symbolsTime":"1 mins."},"categories":[{"name":"回忆","slug":"回忆","count":2,"path":"api/categories/回忆.json"}],"tags":[{"name":"开发者","slug":"开发者","count":2,"path":"api/tags/开发者.json"}],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}},"feature":true},"next_post":{"title":"树(1)","uid":"470c309602da5c2e94f04f070eda269c","slug":"树1","date":"2021-11-30T02:18:26.000Z","updated":"2021-11-30T12:42:08.896Z","comments":true,"path":"api/articles/树1.json","keywords":null,"cover":[],"text":" 树 查找 数据管理的基本操作之一是查找：即根据某个给定的关键字K，从集合R中找出与K相同的记录 静态查找：集合中的记录是固定的 动态查找：集合中的记录是动态变化的，除查找外还可能发生插入和删除 ——如何实现有效率的查找？ 方法一：顺序查找 遍历给定数组，找到目标元素或遍历完全部...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"学习心得","slug":"学习心得","count":2,"path":"api/categories/学习心得.json"}],"tags":[{"name":"浙大数据结构","slug":"浙大数据结构","count":2,"path":"api/tags/浙大数据结构.json"}],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}}}