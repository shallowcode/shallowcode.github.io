{"total":23,"pageSize":13,"pageCount":2,"data":[{"title":"队列","uid":"1840725987698b4cef5a9ce40df0584c","slug":"队列","date":"2022-06-22T04:50:06.000Z","updated":"2022-06-26T17:16:45.378Z","comments":true,"path":"api/articles/队列.json","cover":null,"text":"栈出栈排序给出一个入栈顺序，是一个1～n的排序，求字典序最大的出栈顺序 对当前元素入队，如果栈顶元素大于之后的所有元素，出栈 队列插队给出若干进队出队信息，如果出队则一定是从队头出队，如果入队则分为正常入队和插队入队，题目保证当所有信息给出后所有进队的人都已出队，且一个人一定先进...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},{"title":"特殊的数据结构","uid":"cf16dcad745c39bc496f066c73c8929e","slug":"特殊的数据结构","date":"2022-05-21T14:49:59.000Z","updated":"2022-05-21T14:53:34.100Z","comments":true,"path":"api/articles/特殊的数据结构.json","cover":null,"text":"维护序列中最小未出现过的非负整数，支持插入，查询，删除用一个数组记录每个数出现过的次数，用set维护一个按大小排列的未出现过数 int cot[maxnum]; set&lt;int&gt;st; int m; int op, x; void solve() &#123; for...","link":"","photos":[],"count_time":{"symbolsCount":611,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},{"title":"cf-792-div1+2","uid":"ec879031a4be3590103f0fd58b750e46","slug":"cf-792-div1-2","date":"2022-05-20T15:40:39.000Z","updated":"2022-05-24T12:42:29.107Z","comments":true,"path":"api/articles/cf-792-div1-2.json","cover":null,"text":"C题意：给定一个矩阵，你可以将任意两列交换至多一次，问能否使矩阵每一行不下降 方法：读入矩阵，对每一行重新排序，若与原序列不同则加入有问题数组，数组长度大于2则不可能交换一次解决，否则将矩阵交换该两列，看是否满足答案 题意：给定一个2行n列的矩阵，可以任意交换两列，问能否使矩阵的...","link":"","photos":[],"count_time":{"symbolsCount":648,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},{"title":"搜索","uid":"3ae07ab74ec1bcb36882cc1ce0d929c6","slug":"搜索","date":"2022-05-12T00:57:55.000Z","updated":"2022-07-11T14:22:33.791Z","comments":true,"path":"api/articles/搜索.json","cover":null,"text":"搜索剪枝小木棍有一些同样长的小木棍，将这些木棍随意切割，得到若干小木棍，已知这些小木棍的长度，求最小的初始木棍原长 1.搜索 根据一根木棍的拼接来确定搜索的参数，设立： 还有多少木棍没有进行拼接 当前拼接的木棍还需要多少长度 目标木棍长度 现在处理第几根木棍 vector&lt;...","link":"","photos":[],"count_time":{"symbolsCount":882,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},{"title":"技巧","uid":"c415bd8a15236b765141e56b25f1f835","slug":"技巧","date":"2022-05-11T15:58:56.000Z","updated":"2022-06-26T16:48:54.706Z","comments":true,"path":"api/articles/技巧.json","cover":null,"text":"$ 用逻辑尺来暴力枚举对于n个状态的取舍的2^n种情况 $ for (int i&#x3D;0;i&lt;(1&lt;&lt;n);++i)&#123; for (int j&#x3D;0;j&lt;n;++i)&#123; if(i&lt;&lt;j&amp;1)&#123; ...","link":"","photos":[],"count_time":{"symbolsCount":889,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},{"title":"二分查找","uid":"d843ced03f40ac612213952de4b63ad2","slug":"二分查找","date":"2022-05-03T14:28:29.000Z","updated":"2022-05-11T15:45:53.872Z","comments":true,"path":"api/articles/二分查找.json","cover":null,"text":"lower_bound()与upper_bound()&#x2F;&#x2F;对于结构体重载例如 struct op&#123; int elem,id; op(int a,int b)&#123;elem&#x3D;a;id&#x3D;b;&#125; bool operato...","link":"","photos":[],"count_time":{"symbolsCount":390,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},{"title":"算法竞赛入门经典","uid":"3f75e6c48899ccc9cfffa214dd7d68de","slug":"算法竞赛入门经典","date":"2022-05-02T13:26:37.000Z","updated":"2022-05-02T13:34:28.326Z","comments":true,"path":"api/articles/算法竞赛入门经典.json","cover":null,"text":"1.如果一个字符串不存在两个相邻的重复子串，则字符串满足题意，求用前L个字母构成的，字典序排第n的子串暴力思路：检查所有偶数长度的子串，检查其是否为前缀后缀相同的子串 优化思路：由于求字典序，只需判断当前字符串的所有后缀子串是否满足条件，从左往右推进，检查当前字符串 int n,...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},{"title":"cf-785-div2","uid":"e24161b022b99e01e5ff1a820d3ba3c0","slug":"cf-785-div2","date":"2022-05-02T01:26:10.000Z","updated":"2022-05-02T07:09:54.445Z","comments":true,"path":"api/articles/cf-785-div2.json","cover":null,"text":"C题意：给出一个数n，n可以用若干回文数之和的形式表示出来，求有多少种方法来表示方法：先枚举回文数 bool check(int x)&#123; int n&#x3D;0,xx&#x3D;x; while(x)&#123; n&#x3D;n*10+s%10; x&#x2F;&#...","link":"","photos":[],"count_time":{"symbolsCount":775,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},{"title":"二叉堆","uid":"1f95e29524cb1fc8f16f7dbdf365181a","slug":"二叉堆","date":"2022-04-27T06:23:23.000Z","updated":"2022-04-27T06:34:35.691Z","comments":true,"path":"api/articles/二叉堆.json","cover":null,"text":"&#x2F;&#x2F;手动实现 void shift(int i)&#123; while(1)&#123; int l&#x3D;2*i; if(l&lt;&#x3D;len-1&amp;&amp;a[l]&gt;a[l+1])l++; if(l&gt;len||a[i]&l...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},{"title":"cf-783-div2","uid":"fa4d4536e5d7115952b0289a4a257f8c","slug":"cf-783-div2","date":"2022-04-20T03:13:31.000Z","updated":"2022-05-17T15:46:45.295Z","comments":true,"path":"api/articles/cf-783-div2.json","cover":[],"text":"C题意：给出长度为n的序列a,长度为n的序列b中初始值全是0,每次操作可以让加上或者减去,问最少操作多少次才能使变成一个严格单调递增的序列.方法：贪心的考虑，最终数组一定会有0存在，枚举0的位置，依次计算达到严格单调递增所需要移动的次数int main()&#123; n&#x3...","link":"","photos":[],"count_time":{"symbolsCount":851,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},{"title":"树状数组2","uid":"75693a8c6f85806ac837bdc72f35a1c0","slug":"树状数组2","date":"2022-04-19T08:42:09.000Z","updated":"2022-04-19T08:42:23.468Z","comments":true,"path":"api/articles/树状数组2.json","cover":null,"text":"#include&lt;bits&#x2F;stdc++.h&gt; #define ll long long #define MAX 500005 using namespace std; ll read()&#123; char c&#x3D;getchar();ll x&#...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},{"title":"树状数组1","uid":"a9af62bfd9db986968c6d2172b939d09","slug":"树状数组1","date":"2022-04-19T06:36:42.000Z","updated":"2022-04-19T06:38:14.421Z","comments":true,"path":"api/articles/树状数组1.json","cover":[],"text":"#include&lt;bits&#x2F;stdc++.h&gt; #define ll long long #define MAX 500001 using namespace std; ll read()&#123; char c&#x3D;getchar();ll x&#...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}},{"title":"线性筛模版","uid":"a8700b1bec2379b19ad66ea321a2af93","slug":"线性筛模版","date":"2022-04-08T05:46:50.000Z","updated":"2022-04-16T14:44:55.990Z","comments":true,"path":"api/articles/线性筛模版.json","cover":null,"text":"#include&lt;bits&#x2F;stdc++.h&gt; using namespace std; int n,q,k,cnt; bool isprime[100000001]; int prime[100000001]; int main()&#123; cin&g...","link":"","photos":[],"count_time":{"symbolsCount":585,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"shallow","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/e34cf65a5d76470da93ba82bf95b3745.png","link":"/","description":"我并非生来勇敢，天赋过人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/475614133/dynamic"},"github":{"icon":"/svg/github.svg","link":"https://github.com/shallowcode"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/qian-meng-9-42-73"}}}}}]}